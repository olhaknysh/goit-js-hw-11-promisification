{"version":3,"sources":["webpack:///./js/task1.js","webpack:///./js/task2.js","webpack:///./js/task3.js"],"names":["delay","ms","Promise","resolve","setInterval","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","min","max","id","amount","Math","floor","random","reject","setTimeout","logSuccess","logError","warn","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,aAAY,WACVD,EAAQF,QAETA,IAGCI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCbXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAAAC,GAIjBA,EAHqBW,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAM7DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCnBnC,IAIMe,EAAkB,SAAC,GAAmB,IAJTC,EAAKC,EAIbC,EAAiB,EAAjBA,GACnBjB,GADoC,EAAbkB,OAJIH,EAKM,IALDC,EAKM,IAJrCG,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,EAAM,GAAKA,IAMpD,OAAO,IAAInB,SAAQ,SAACC,EAASyB,GAC3BC,YAAW,WACUJ,KAAKE,SAAW,IAGjCxB,EAAQ,CAAEoB,KAAIjB,SAEhBsB,EAAOL,KACNjB,OAIDwB,EAAa,SAAC,GAAiB,IAAfP,EAAe,EAAfA,GAAIjB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2Be,EAA3B,iBAA8CjB,EAA9C,OAGIyB,EAAW,SAAAR,GACfhB,QAAQyB,KAAR,gCAA6CT,EAA7C,8BAGFH,EAAgB,CAAEG,GAAI,GAAIC,OAAQ,MAAOf,KAAKqB,GAAYG,MAAMF,GAEhEX,EAAgB,CAAEG,GAAI,GAAIC,OAAQ,MAAOf,KAAKqB,GAAYG,MAAMF,GAEhEX,EAAgB,CAAEG,GAAI,GAAIC,OAAQ,KAAMf,KAAKqB,GAAYG,MAAMF,GAE/DX,EAAgB,CAAEG,GAAI,GAAIC,OAAQ,MAAOf,KAAKqB,GAAYG,MAAMF,K","file":"main.69b276dffa74708f4fed.js","sourcesContent":["const delay = ms => {\n  return new Promise(resolve => {\n    setInterval(() => {\n      resolve(ms);\n    });\n  }, ms);\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise(resolve => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    resolve(updatedUsers);\n  });\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = ({ id, amount }) => {\n  const time = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id, time });\n      }\n      reject(id);\n    }, time);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"],"sourceRoot":""}